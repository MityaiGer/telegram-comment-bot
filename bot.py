# bot.py
import os
import re
import logging
import asyncio
import random
from datetime import datetime, timedelta
from dotenv import load_dotenv
from asyncio import Event
# Third-party libraries
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import InvalidQueryID
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from project_config.config import task_manager as global_task_manager, account_manager, CommentSender, TaskManager
# Local modules
from project_config.config import task_manager, account_manager, AccountManager, comment_sender, CommentSender

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logging.getLogger('telethon').setLevel(logging.ERROR)
logging.getLogger('telethon.network.mtprotosender').setLevel(logging.ERROR)
logger = logging.getLogger(__name__)
load_dotenv()

log_file = 'app_logs.log'
file_handler = logging.FileHandler(log_file)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)


# Bot Initialization
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("/start"))
last_task_execution_time = datetime.now()
task_executed_event = Event()

monitoring_enabled = True
last_task_completed = False
bot_should_continue = True
comments_sent = False
auth_in_progress = False
# FSM States
class Form(StatesGroup):
    link = State()
    comments = State()
    delay = State()
    running = State()  

allowed_users = ["2089545494", "5187431761", "5654082445","5114237580", "5400757423","5044826920", "6921429885"]  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def on_start_command(message: types.Message):
    user_id = str(message.from_user.id)
    
    if user_id in allowed_users:
        global bot_should_continue
        bot_should_continue = True
        
        await account_manager.connect_account()
        asyncio.create_task(execute_task())
        asyncio.create_task(monitor_task_timeout())
        
        await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
    else:
        await message.reply("üò¢ –ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

async def start_task_execution_and_connections():
    await account_manager.connect_account()
    asyncio.create_task(execute_task())
    print('start')
    

async def execute_task():
    global last_task_execution_time
    global comments_sent
    global last_task_completed
    while bot_should_continue:
        try:
            executed_comments = await task_manager.execute_tasks()
            if executed_comments:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(executed_comments)}")
                last_task_completed = True  # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                for comment_info in executed_comments:
                    comment_text = comment_info['comment']
                    await bot.send_message(comment_info['chat_id'], f'‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n\n‚úâÔ∏è - {comment_text}')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")       
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    global auth_in_progress  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    global last_task_completed
    global last_task_execution_time
    global monitoring_enabled 
    auth_in_progress = True
    monitoring_enabled = True
    global bot_should_continue
    bot_should_continue = True
    user_id = str(message.from_user.id)
    if user_id in allowed_users:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton('–ù–ê–ß–ê–¢–¨', callback_data='start'),
            types.InlineKeyboardButton('–û–°–¢–ê–ù–û–í–ò–¢–¨', callback_data='stop')
            
        )
        msg = await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        await bot.pin_chat_message(message.chat.id, msg.message_id, disable_notification=True)
    else:
        await message.reply("üò¢ –ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
@dp.message_handler(commands='stop', state='*')
async def process_callback_stop(callback_query: types.CallbackQuery,  state: FSMContext):
    global auth_in_progress  # –í–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    auth_in_progress = True
    global bot_should_continue
    bot_should_continue = False
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã.')
    await account_manager.disconnect_account()
    await state.finish()
    #await bot.send_message(callback_query.from_user.id, '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã.')
    await asyncio.sleep(20)
    await bot.send_message(callback_query.from_user.id, '‚õîÔ∏è –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨".')
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton('–ü–†–û–î–û–õ–ñ–ò–¢–¨', callback_data='start'),
        
    )
    await bot.send_message(callback_query.from_user.id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
   

@dp.callback_query_handler(lambda c: c.data == 'restart', state='*')
async def process_callback_start(callback_query: types.CallbackQuery, state: FSMContext):
    global auth_in_progress  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    global last_task_completed
    global last_task_execution_time
    global monitoring_enabled 
    auth_in_progress = True
    monitoring_enabled = True
    global bot_should_continue
    bot_should_continue = True
    try:
        await bot.send_message(callback_query.from_user.id, 'ü§ñ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Å–µ—Å—Å–∏–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥')
        active_clients = await account_manager.get_active_clients()
        await bot.answer_callback_query(callback_query.id)
        await Form.link.set()
        await start_task_execution_and_connections()
        await bot.send_message(callback_query.from_user.id, f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ: {len(active_clients)} —Å–µ—Å—Å–∏–π")
        await bot.send_message(callback_query.from_user.id, f'‚úîÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç üìÉ')
        last_task_execution_time = datetime.now()  
        asyncio.create_task(monitor_task_timeout(callback_query, state))
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton('–û–°–¢–ê–ù–û–í–ò–¢–¨', callback_data='stop'),
            
        )
        await bot.send_message(callback_query.from_user.id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    except InvalidQueryID as e:
        await bot.send_message(callback_query.from_user.id, f'‚ùå Error: {e}')
        
@dp.callback_query_handler(lambda c: c.data.startswith('connect'), state='*')
async def process_connect_category(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)

    if user_id not in allowed_users:
        await bot.answer_callback_query(callback_query.id, 'üò¢ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
        return

    category = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data

    if category in ['mixed', 'male', 'female']:
        await account_manager.connect_account(category)
        await bot.answer_callback_query(callback_query.id, f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}')
    else:
        await bot.answer_callback_query(callback_query.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.')

@dp.callback_query_handler(lambda c: c.data == 'start', state='*')
async def process_callback_start(callback_query: types.CallbackQuery, state: FSMContext):
    global auth_in_progress  # –í–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    global last_task_execution_time
    global monitoring_enabled
    global bot_should_continue
    bot_should_continue = True
    auth_in_progress = True
    monitoring_enabled = True
    try:
        await bot.send_message(callback_query.from_user.id, 'ü§ñ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Å–µ—Å—Å–∏–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥')
        active_clients = await account_manager.get_active_clients()
        last_task_execution_time = datetime.now()
        await bot.answer_callback_query(callback_query.id)
        await Form.link.set()
        await start_task_execution_and_connections()
        await bot.send_message(callback_query.from_user.id, f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ: {len(active_clients)} —Å–µ—Å—Å–∏–π")
        await bot.send_message(callback_query.from_user.id, f'‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n'
                                                        f'‚úîÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç üìÉ')
        
        asyncio.create_task(monitor_task_timeout(callback_query, state))
        last_task_execution_time = datetime.now()
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton('–û–°–¢–ê–ù–û–í–ò–¢–¨', callback_data='stop'),
            
        )
        await bot.send_message(callback_query.from_user.id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    except InvalidQueryID as e:
        await bot.send_message(callback_query.from_user.id, f'‚ùå Error: {e}')
    
@dp.callback_query_handler(lambda c: c.data == 'stop', state='*')
async def process_callback_stop(callback_query: types.CallbackQuery,  state: FSMContext):
    global auth_in_progress  # –í–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    auth_in_progress = True
    global bot_should_continue
    bot_should_continue = False
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã.')
    await account_manager.disconnect_account()
    await state.finish()
    #await bot.send_message(callback_query.from_user.id, '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã.')
    await asyncio.sleep(20)
    await bot.send_message(callback_query.from_user.id, '‚õîÔ∏è –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨".')
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton('–ü–†–û–î–û–õ–ñ–ò–¢–¨', callback_data='start'),
        
    )
    await bot.send_message(callback_query.from_user.id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
   
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
@dp.message_handler(state=Form.link)
async def process_link(message: types.Message, state: FSMContext):
    link = message.text
    match = re.match(r'https?://t.me/[^/]+/(\d+)', link)
    if match:
        post_id = int(match.group(1))
        if post_id:
            async with state.proxy() as data:
                data['post_id'] = post_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                channel_username = link.split('/')[-2]
                data['channel_username'] = channel_username
                
                await Form.comments.set()
                await bot.send_message(message.chat.id, 'üìå –ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.')
        else:
            await bot.send_message(message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "https://t.me/username/post_id".')
    else:
        await bot.send_message(message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "https://t.me/username/post_id".')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@dp.message_handler(state=Form.comments)
async def process_comments(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['comments'] = message.text.split('\n')
        await Form.delay.set()
        await bot.send_message(message.chat.id, '‚è∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –¥–≤–µ –ø–∞—Ä—ã —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, "60 180":\n\n–ü–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É!')

@dp.message_handler(lambda message: not all(part.isdigit() for part in message.text.split()), state=Form.delay)
async def process_invalid_delay_format(message: types.Message):
    await message.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–µ –ø–∞—Ä—ã —Ü–∏—Ñ—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, "60 180".')
    # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥)
@dp.message_handler(state=Form.delay)
async def process_delay(message: types.Message, state: FSMContext):
    global last_task_execution_time
    global last_task_completed
    global comments_sent

    async with state.proxy() as data:
        delays = message.text.split()

        if len(delays) == 2 and all(part.isdigit() for part in delays):
            delay_min, delay_max = int(delays[0]), int(delays[1])

            if delay_min > 0 and delay_max >= delay_min:
                data['delay_min'] = delay_min
                data['delay_max'] = delay_max
                channel_username = data['channel_username']
                post_id = data['post_id']
                comments = data['comments']
                

                try:
                    total_comments = len(comments)
                    await bot.send_message(message.chat.id, f'‚òùÔ∏è –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ {total_comments} –∑–∞–¥–∞—á(—á–∏)')
                    for index, comment in enumerate(comments):
                        random_delay = random.randint(delay_min, delay_max)

                        task = await task_manager.create_task(channel_username, post_id, [comment], random_delay)
                        
                        if task:True
                        task_execution_time = datetime.now() + timedelta(seconds=random_delay)
                        await bot.send_message(message.chat.id, f'üî• –ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ üî•\n'
                                                                f'üîπ –ö–∞–Ω–∞–ª: {channel_username}\n'
                                                                f'üî∏ ID –ø–æ—Å—Ç–∞ –≤ —á–∞—Ç–µ: {post_id}\n'
                                                                f'‚è≥ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n\n‚úçÔ∏è - {comment}\n'
                                                                f'üïí –°–ª–µ–¥—É—â–∏–π –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {random_delay} —Å–µ–∫—É–Ω–¥, '
                                                                    f'–≤ {task_execution_time.strftime("%H:%M:%S")}')
                        
                        
                        # task_execution_time = datetime.now() + timedelta(seconds=random_delay)
                        # await bot.send_message(message.chat.id, f'üïí –°–ª–µ–¥—É—â–∏–π –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {random_delay} —Å–µ–∫—É–Ω–¥, '
                        #                                             f'–≤ {task_execution_time.strftime("%H:%M:%S")}')
                        
                        await bot.send_message(message.chat.id, f'‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n\n‚úâÔ∏è - {comment}')
                        await asyncio.sleep(random_delay)  
                    if index == total_comments - 1:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        await bot.send_message(message.chat.id, f'üéâ –í—Å–µ {total_comments} –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ... ')
                    last_task_completed = True
                    last_task_execution_time = datetime.now()
                    task_executed_event.set()
                    comments_sent = True
                    await state.finish()

                    keyboard = types.InlineKeyboardMarkup(row_width=2)
                    keyboard.add(
                        types.InlineKeyboardButton('–ü–†–û–î–û–õ–ñ–ò–¢–¨', callback_data='restart'),
                        types.InlineKeyboardButton('–û–°–¢–ê–ù–û–í–ò–¢–¨', callback_data='stop')
                    )
                    await bot.send_message(message.chat.id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

                except Exception as e:
                    await bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}')
            else:
                await bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ø–µ—Ä–≤–æ–º—É.')
        else:
            await bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –ø–∞—Ä—ã —Ü–∏—Ñ—Ä, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, "60 180".')

            
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.delay)
async def monitor_task_timeout(callback_query: types.CallbackQuery, state: FSMContext):
    global last_task_execution_time
    global monitoring_enabled
    global last_task_completed
    while bot_should_continue:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        current_time = datetime.now()
        if current_time - last_task_execution_time >= timedelta(minutes=30):  # 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
            if not last_task_completed:  # –ï—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å
                #await bot.answer_callback_query(callback_query.id)
                await bot.send_message(callback_query.from_user.id, '‚õîÔ∏è –ò–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å–≤–∏—è –∑–∞–¥–∞—á –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω!')
                await bot.send_message(callback_query.from_user.id, '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã.')
                await account_manager.disconnect_account()
                await state.finish()
                #await bot.send_message(callback_query.from_user.id, '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã.')
                await asyncio.sleep(20)
                await bot.send_message(callback_query.from_user.id, '‚õîÔ∏è –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨".')
                
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    types.InlineKeyboardButton('–ü–†–û–î–û–õ–ñ–ò–¢–¨', callback_data='start'),
                    
                )
                await bot.send_message(callback_query.from_user.id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
            
                return  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
            else:
               last_task_completed = False

